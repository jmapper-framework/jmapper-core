<wiki:toc max_depth="2" />

= Overview of JMapper Framework =

Currently, there are many frameworks that can significantly reduce the workload, leading mainly two major benefits: *robustness* and *productivity*. 
Among the most important we can mention Hibernate, Spring, Struts, and other more recent as Vaadin, Spring Roo, Grails ..., thanks to them the mechanical work is reduced to a minimum. 
However, none of these automates a common feature, present in all J2EE applications, the *mapping*. 
The mapping is a mechanical operation that almost 100%, in medium to large applications, including development, testing and bug fixing, reaches a weight is certainly not negligible. 
As the rule may seem elementary, enclose in a single framework a potentially unlimited number of combinations, mapping recursive addition of logic and other features, makes its implementation very complex and questionable compromises, such as poor performance, covering a limited features, etc... . 

JMapper aims not only coverage requirements but also to make it as easy as possible to use, all with performance equivalent or superior to the static mapping. 
  
JMapper specifically allows: 
*to perform complex mapping (Collection, Map, Array, InnerClass, etc...)

*to manage implicit and explicit relationships of various types: 
 *one to one 
 *one to many 
 *many-to-one 

*to perform recursive mapping (mapped objects into other objects) 
*to configure the mapping using the annotation and / or xml
*to write quick and simple xml configuration file through a series of utility methods