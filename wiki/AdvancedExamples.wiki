#summary some usage examples of JMapper.

= Advanced examples =

We will see now some very interesting examples of use, which makes the code more concise and elegant.

== Layered application ==

A classic example is a web application that consists of three layers: facade, business and data access.
Each layer has two bean, one of input and one of output.
<table width="100%"><tr><td  align="center">
{{{
             ____________       ____________       ____________
      PivotI |          | BoI   |          | DtoI  |          |
      ------>|  Facade  |------>| Business |------>|  Data    |
             |          |       |          |       |  Access  |
      PivotO |  Layer   | BoO   | Layer    | DtoO  |  Layer   |
      <------|          |<------|          |<------|          |
             |__________|       |__________|       |__________|
}}}
</td></tr></table>
In the architecture of this type, for each service you need to implement four mapping: {{{PivotI -> BoI -> DtoI}}} and {{{DtoO -> BoO -> PivotO}}}.

With Jmapper you need to configure only the two business objects, with the surrounding objects.
<table width = "100%"><tr><td>
{{{
   class PivotI{
       String pivotIfield;
   }

   class BoI{              
       @JMap(attributes={"pivotIfield", "dtoIfield"}
             classes   ={PivotI.class,  DtoI.class}) 
       Integer boIfield; 
   }

   class DtoI{
       Integer dtoIfield;
   }
}}}
</td><td>
{{{
   class PivotO{
       String pivotOfield;
   }

   class BoO{              
       @JMap(attributes={"pivotOfield", "dtoOfield"}
             classes   ={PivotO.class,  DtoO.class}) 
       Integer boOfield; 
   }

   class DtoO{
       Integer dtoOfield;
   }
}}}
</td></tr></table>
below the sample code:
{{{
   class ExampleFacade{
       
       RelationalJMapper<BoI> rmI;
       RelationalJMapper<BoO> rmO;
       ExampleBusiness exampleBusiness;

       public PivotO executes(PivotI pivotI){
           
           // mapping
           BoI boI = rmI.manyToOne(pivotI);

           // logic
           BoO boO = exampleBusiness.executes(boI);

           // mapping
           PivotO pivotO = rmO.setDestinationClass(PivotO.class).oneToMany(boO);
           
           return pivotO;
       }      
   }
   
   class ExampleBusiness{

       RelationalJMapper<BoI> rmI;
       RelationalJMapper<BoO> rmO;
       ExampleDAO exampleDao;

       public BoO executes(BoI boI){
           
           // mapping
           DtoI dtoI = rmI.setDestinationClass(DtoI.class).oneToMany(boI);

           // logic
           DtoO dtoO = exampleDao.executes(dtoI);
           
           // mapping
           BoO boO = rmO.manyToOne(dtoO);

           return boO;
       }      
   }

   class ExampleDao{

       public DtoO executes(DtoI dtoI){
           // some operations
           return dtoO;
       }

   }
}}}
*Two Configurations and two instances of RelationalJMapper is all you need*.

== common logic for different objects ==

You may have the need to apply a common logic in most parts of the web application, using different objects as input.
Standard solutions can be:
 * use *instanceof* to identify class type
 * pass, as input to the method, the values â€‹to handle

Any solution that you can design, you will always have the need to change the code for every little request. with JMapper becomes:
<table width = "100%"><tr><td>
{{{
class Service1{

    CommonLogic cl;
    
    public void executes(Service1I service1I){
        cl.(service1I);
    }
}
}}}
</td><td>
{{{
class Service2{

    CommonLogic cl;
    
    public void executes(Service2I service2I){
        cl.(service2I);
    }
}
}}}
</td><td>
{{{
class Service3{

    CommonLogic cl;
    
    public void executes(Service3I service3I){
        cl.(service3I);
    }
}
}}}
</td></tr></table>
Input objects:
<table width = "100%"><tr><td>
{{{
class Service1I{

   List<String> customersIds;

}
}}}
</td><td>
{{{
class Service2I{

   Set<Integer> companyIds;

}
}}}
</td><td>
{{{
class Service1I{

   TreeSet<String> supplierIds;

}
}}}
</td></tr></table>