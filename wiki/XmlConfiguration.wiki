#summary description of the Xml configuration.

= XML format =

The annotations are easy to use, minimize setup time, but you must necessarily put hands to manipulate the code, for this reason, the framework also handles the configuration in XML format.

The xml follows the @JMap criteria: the combinations between value, attributes and classes are the same. 
The xml configuration follows the pattern below:
{{{
                                                      1..*
                                          attributes ------ attribute
                                           /
                                     0..1 /
                                         /
           1..*         1..*            /  0..1            1..* 
  jmapper ------ class ------ attribute --------- classes ------ class
                      \                 \
                       \                 \
                   0..* \            0..1 \
                         \                 \
                      conversion          value
}}}
There's an example:
{{{
<jmapper>
  <class name='com.myapplication.bean.ExampleClass'>
    <attribute name='field1'>
      <value name='field1Class1'/>
      <attributes>
        <attribute name='field1Class1' />
        <attribute name='field1Class2' />
        <attribute name='field1Class3' />
      </attributes>
      <classes>
        <class name='com.myapplication.bean.Class1' />
        <class name='com.myapplication.bean.Class2' />
        <class name='com.myapplication.bean.Class3' />
      </classes>
    </attribute>
    <conversion name="firstConversion" from="field1" to="field1Class1" type="STATIC">
        return ${source};
    </conversion>
  </class>
</jmapper>
}}}
If you want create this mapping file with utility methods, see the [XmlHandling XML handling] paragraph. For more informations about conversion node see [ExplicitConversions explicit conversions] section.

For more information see [Introduction#JMapper_constructors JMapper constructors] paragraph.