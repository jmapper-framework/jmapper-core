#summary this page describes all configurations.

= Configurations =

All configurations on JMapper are contained in this page.

== Spring configuration =

Example of JMapper configuration:
{{{
<bean id="jmapper" class="it.avutils.jmapper.JMapper">
   <constructor-arg><value>bean.Destination</value></constructor-arg>
   <constructor-arg><value>bean.Source</value></constructor-arg>
</bean>
}}}
Example of RelationalJMapper configuration:
{{{
<bean id="relationalJmapper" class="it.avutils.jmapper.RelationalJMapper">
   <constructor-arg><value>bean.ConfiguredBean</value></constructor-arg>
</bean>
}}}

== Maven configuration ==

currently the jar is not present in the maven repository, then you must install it locally.

=== installation command ===

{{{
mvn install:install-file 
-Dfile="jar location\jmapper-core-1.0.0.jar" 
-DgroupId=it.avutils.jmapper 
-DartifactId=jmapper-core 
-Dversion=1.0.0 
-Dpackaging=jar
}}}

=== dependency ===
{{{
<dependency>
   <groupId>it.avutils.jmapper</groupId>
   <artifactId>core</artifactId>
   <version>1.0.0</version>
</dependency>
}}}

== Files configuration ==

=== JMapper configuration ===
Per agire sui file java relativi alle classi configurate è necessario indicare al framework qual'è il folder che li contiene, di default la cartella di partenza è la root dell'applicazione, nel caso in cui si voglia limitare l'azione ad un package ed ai sui eventuali subpackage, basterà creare il file jmapper.cfg.properties posizionandolo nella root dell'applicazione, con la seguente coppia chiave = valore ad esempio:
path.root = com.myapplication.bean, in alternativa si può definire esplicitamente il percorso al file.
Ecco come definire il path al file di configurazione:
{{{
Path.setCfg("file location/fileName.properties");
}}} 

=== XML ===