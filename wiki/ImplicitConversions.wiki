#summary implicit conversions are performed between primitive and / or wrapper fields

= Implicit conversions =

JMapper allows to perform implicitly mapping between primitive and / or wrapper types, such as from String to Integer and vice versa. Below are represented the conventions used to handle all those *conversions* that are *uncommon*:
||*Conversion*||*Result*||
||Boolean -> Number||1 if Boolean is true, 0 if false||
||Boolean -> Character/char||T if Boolean is true, F if false||
||String -> Character/char||is taken the first character||
||Number -> boolean||false if Number is equal to 0, true all other cases||
||Character/char -> Boolean||true if Char is equal to T, false if Char is equal to F, null all other cases||
||Character/char -> boolean||true if Char is equal to T, false all other cases||

It also converts the arrays, collections and maps including their objects, for example:
 * from interface to implementation and vice versa
   {{{List <--> ArrayList}}}
 * between different interfaces
   {{{List <--> Set}}}<br>
   {{{Map <--> SortedMap}}}
 * between different implementations
   {{{ArrayList <--> HashSet}}}<br>
   {{{HashMap <--> TreeMap}}}
 * a combination of the two previous
   {{{List <--> HashSet}}}<br>
   {{{HashMap <--> SortedMap}}}
 * conversion of primitive/wrapper items
   {{{List<String> <--> HashSet<Integer>}}}<br>
   {{{HashMap<Integer, String> <--> SortedMap<String, Integer>}}}
 * conversion of mapped items
   {{{List<TargetObj> <--> HashSet<ConfigObj>}}}<br>
   {{{HashMap<Integer, ConfigObj> <--> SortedMap<String, TargetObj>}}}
 * conversion of primitive/wrapper arrays
   {{{String[] <--> Integer[]}}}
 * conversion of mapped arrays
   {{{TargetObj[] <--> ConfigObj[]}}}

 * conversion between arrays and collections:
   * structural
     {{{String[] <--> List<String>}}}
   * with different primitive/wrapper types
     {{{String[] <--> List<Integer>}}}
   * with configured items
     {{{TargetObj[] <--> List<ConfigObj>}}}
 