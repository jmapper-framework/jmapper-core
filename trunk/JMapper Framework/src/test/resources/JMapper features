1.2.1

 - Refactoring del codice

  - verificare che la eliminazione del global dal file avvenga bene anche con le innerclass
  - gestire gli analyzer in un vettore e non con una sequenza di if.
  - merge di due array ottimizzato:
 		int[] result2 = Arrays.copyOf(array, array.length + array2.length);
		System.arraycopy(array2, 0, result2, array.length, array2.length);  

1.3.0

 - Multiple Mapping
   
  - Con la classe RelationalJMapper si ha la possibilità di implementare una relazione 1 a N o N a 1 tra
    la classe configurata e quelle target.
    Ma la relazione che c'è tra i campi della classe configurata e i campi delle classi target è sempre 1 a 1 (con @JMap).
    Ciò vuol dire che in caso di conversioni dinamiche non è permesso (con la versione 1.1.1) configurare 
    direttamente un campo con N altri, ma invece bisogna configurare gli N campi verso il campo interessato.
    Con il global mapping invece è possibile mappare N campi verso uno.
    Ciò che manca è la possibilità di mappare un campo verso N.

    Obiettivo
   
      L'intento è quello di configurare 1 campo verso N altri:
           
      ANNOTATION
           
       	class Esempio {
           
               @JMultiMap(targetClass=Target.class,attributes={"field1","field2","field3"}) 
               String field1;
               ...
           }
           
           @JMultiMap permette di configurare un campo contemporaneamente con N altri. Omettendo la targetClass si indica
           al framework di considerare quella in input al costruttore, omettendo gli attributes si indica al framework che
           tutti i campi della classe target sono coinvolti.
           Nel caso in cui ci sia l'esigenza di dichiarare il multimapping verso altri campi di altre classi basterà
           usare l'annotation @JMultiMaps es:
           
       	class Esempio {
           
               @JMultiMaps({
                   @JMultiMap(targetClass=Target.class,attributes={"field1","field2","field3"})
                   @JMultiMap(targetClass=Other.class, attributes={"other1","other2","other3"})
               }) 
               String field1;
               ...
           }
           
      XML
           
           Per esprimere lo stesso concetto in xml si utilizzerà il nodo multiAttribute, es:
           
  	 <multiAttribute name="field1">
     	      <target class="com.myapplication.Target" attributes="field1,field2,field3" />
  	 </multiAttribute>
  
           multiAttribute ha un attributo name che corrisponde al nome del campo configurato e N nodi target,
           il nodo target rispecchia l'annotation @JMultiMap, ovvero ha un attributo class e un attributo attributes,
           che contiene la lista dei campi separati da una virgola.
           Per riflettere invece JMultiMaps basterà dichiarare piu nodi target. 
           

1.4.0

  - possibilità di definire template
         
1.5.0

 - DEFAULT BEHAVIORs
  
   i comportamenti predefiniti tornano utili in tutti quei casi in cui il comportamento desiderato è identico in ogni utilizzo di JMapper. 
   Ad essere analizzati sono i tipi dei campi, non servirà quindi dichiarare i nomi dei campi interessati.
   Un esempio può essere la conversione da String a Date:

   @DefaultBehavior
   class DateBehaviors {
   
      @Creation
      public static Date getDate(String str){
         return new java.text.SimpleDateFormat("dd/MM/yyyy").parse(str);
      }
      
      @Enrichment
      public static void enrichDate(Date date, String str){
         date = new java.text.SimpleDateFormat("dd/MM/yyyy").parse(str);
      }
   }
   
   Oppure quando il campo di destinazione è una lista e i campi sorgenti sono oggetti: in questo caso il 
   comportamento predefinito consisterebbe nel effettuare diversi add.
   
   @DefaultBehavior
   class ListBehaviors {
   
      @Creation
      public static <T> List<T> getList(T str){
         List<T> list = new ArrayList<T>();
         list.add(str);
         return list;
      }
  
      @Enrichment
      public static <T> void enrichList(List<T> list, T str){
         list.add(str);
      }
   }
  
   Lo stesso criterio lo si può usare quando ad essere configurati sono un StringBuilder/StringBuffer con diverse stringhe.
  
   @DefaultBehaviors
   class ListBehaviors {
   
      @Creation
      public static StringBuilder getSb(Object obj){
        return new StringBuilder(obj);
      }
      
      @Enrichment
      public static void enrichSb(StringBuilder sb, Object str){
         sb.append(obj);
      }
   }
  
   In questo modo i mapping che comprendono due campi i cui tipi sono esplicitamente gestiti come Default Behavior, verranno gestiti
   con i metodi definiti.
   IMPORTANTE Le conversioni esplicite hanno la precedenza.
   
   Per usufruire di questa feature bisogna contrassegnare la classe con l'annotation @DefaultBehavior
   e contrassegnare i metodi che creano il destination con @Creation e quelli che lo arricchiscono con @Enrichment
  

2.0.0

  - possibilità di definire i nomi dei metodi get e set es: JMap("$get{customField}")
  - possibilità di mappare livelli diversi di campi es: JMap("user.getName()")
  - aggiungere regex con pipeline come separatori es |[a-z]|
