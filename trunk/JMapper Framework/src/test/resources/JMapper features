  Sviluppo componenti esterni come procedere ?     
     Integrazione con Hibernate, Apache Camel, XMLBeans, JAXB
     eclipse plugin
     
  Sviluppo di configurazione tramite API ? 
     permettere la creazione della configurazione sia tramite codice che tramite Spring, 
     così da poter sfruttare a pieno il framework, es l'utilizzo del SpEL (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/expressions.html)
     
  Migliorie da apportare alla configurazione XML:
     creare XSD per la validazione dell'xml
     possibilità di utilizzare dei propri placeholder, come in spring (PropertyPlaceholderConfigurer)

Versione 1.2.2 RILASCIATA:

 - aggiunta gestione errori dei metodi dinamici relativi:
   alla scrittura errata di metodi e al passaggio di variabili null
 - aggiunta gestione del setting dei primitivi in mapping complessi
 - aggiornate le dipendenze: xstream, slf4j e javassist
 - aggiunto printStackTrace oltre alla gestione con log 
 - in caso di creazione di collection in destination l'ordine degli elementi viene rispettato
 - aggiunta gestione get dei campi boolean
 - renderlo OSGI compatibile
 - gestito gli analyzer in un vettore e non con una sequenza di if.
 


1.3.0
   
 - definizione dell xsd per content assist da eclipse
   Possibilità di definire get e set custom, ad esempio:
   
   Source {
   
        @JMapAccessor(name = "destinationField", get = "asd", set = "qwe")
        private int sourceField;
		
		int getSourceField()
		
		void setSourceField()
   }
   
   Destination {
   
   		private int destinationField;
   
   		int asd()
   		
   		void qwe(int)
   		
   }
   
   Opzionale name, se non viene definito si da per scontato che il get e il set fanno riferimento al campo stesso.
   In caso contrario è da considerare che la configurazione è relativa al campo target del mapping.
   
   JMapAccessor ha quindi: 
      name (di default si prende il nome del campo)
      get: nome del metodo di get
      set: nome del metodo di set
      
	XML:
	
	al tag attribute aggiungo attributi get e set, sia agli attributi della classe mappata che a quelli target.
	
	<attribute get= "" set= "">
	     
	     
	</attribute>
    
1.4.0

 - Multiple Mapping
   
  - Con la classe RelationalJMapper si ha la possibilità di implementare una relazione 1 a N o N a 1 tra
    la classe configurata e quelle target.
    Ma la relazione che c'è tra i campi della classe configurata e i campi delle classi target è sempre 1 a 1 (con @JMap).
    Ciò vuol dire che in caso di conversioni dinamiche non è permesso (con la versione 1.1.1) configurare 
    direttamente un campo con N altri, ma invece bisogna configurare gli N campi verso il campo interessato.
    Con la versione 1.2.0 è possibile (tramite JGlobalMap) mappare N campi verso uno.
    Ciò che manca è la possibilità di mappare un campo verso N.

    Obiettivo
   
      L'intento è quello di configurare 1 campo verso N altri:
           
      ANNOTATION
           
       	class Esempio {
           
               @JMultiMap(targetClass=Target.class,attributes={"field1","field2","field3"}) 
               String field1;
               ...
           }
           
           @JMultiMap permette di configurare un campo contemporaneamente con N altri. Omettendo la targetClass si indica
           al framework di considerare quella in input al costruttore, omettendo gli attributes si indica al framework che
           tutti i campi della classe target sono coinvolti.
           Nel caso in cui ci sia l'esigenza di dichiarare il multimapping verso altri campi di altre classi basterà
           usare l'annotation @JMultiMaps es:
           
       	class Esempio {
           
               @JMultiMaps({
                   @JMultiMap(targetClass=Target.class,attributes={"field1","field2","field3"})
                   @JMultiMap(targetClass=Other.class, attributes={"other1","other2","other3"})
               }) 
               String field1;
               ...
           }
           
      XML
           
           Per esprimere lo stesso concetto in xml si utilizzerà il nodo multiAttribute, es:
           
  	 <multiAttribute name="field1">
     	      <target class="com.myapplication.Target" attributes="field1,field2,field3" />
  	 </multiAttribute>
  
           multiAttribute ha un attributo name che corrisponde al nome del campo configurato e N nodi target,
           il nodo target rispecchia l'annotation @JMultiMap, ovvero ha un attributo class e un attributo attributes,
           che contiene la lista dei campi separati da una virgola.
           Per riflettere invece JMultiMaps basterà dichiarare piu nodi target. 
           

1.5.0

  - possibilità di definire template:
    
     Nei casi in cui serve generalizzare una configurazione e/o conversioni,
     non deve essere obbligatorio creare una classe in caso di configurazione XML.
     Il template permetterà quindi di definire configurazioni e/o conversioni comuni, senza dover definire alcuna classe. 

2.0.0

  - possibilità di mappare livelli diversi di campi es: JMap("user.getName()")
         
2.1.0

    Flattern ed Expand, in caso di campi con lo stesso nome ma situati in livelli diversi, automatizzare il mapping.
  
2.2.0 o prima ??

 - DEFAULT BEHAVIORs
  
   i comportamenti predefiniti tornano utili in tutti quei casi in cui il mapping è preferibile 
   applicarlo al "tipo" piuttosto che al "nome" del campo. 
   Ad essere analizzati quindi sono i tipi dei campi, non servirà quindi dichiarare i nomi dei campi interessati.
   Un esempio può essere la conversione da String a Date:

   @DefaultBehavior
   class DateBehaviors {
   
      @Creation
      public static Date getDate(String str){
         return new java.text.SimpleDateFormat("dd/MM/yyyy").parse(str);
      }
      
      @Enrichment
      public static void enrichDate(Date date, String str){
         date = new java.text.SimpleDateFormat("dd/MM/yyyy").parse(str);
      }
   }
   
   Oppure quando il campo di destinazione è una lista e i campi sorgenti sono oggetti: in questo caso il 
   comportamento predefinito consisterebbe nel effettuare diversi add.
   
   @DefaultBehavior
   class ListBehaviors {
   
      @Creation
      public static <T> List<T> getList(T str){
         List<T> list = new ArrayList<T>();
         list.add(str);
         return list;
      }
  
      @Enrichment
      public static <T> void enrichList(List<T> list, T str){
         list.add(str);
      }
   }
  
   Lo stesso criterio lo si può usare quando ad essere configurati sono un StringBuilder/StringBuffer con diverse stringhe.
  
   @DefaultBehaviors
   class ListBehaviors {
   
      @Creation
      public static StringBuilder getSb(Object obj){
        return new StringBuilder(obj);
      }
      
      @Enrichment
      public static void enrichSb(StringBuilder sb, Object str){
         sb.append(obj);
      }
   }
  
   IMPORTANTE Le conversioni esplicite hanno la precedenza.
   
   Per usufruire di questa feature bisogna contrassegnare la classe con l'annotation @DefaultBehavior
   e contrassegnare i metodi che creano il destination con @Creation e quelli che lo arricchiscono con @Enrichment
  