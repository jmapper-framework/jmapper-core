
METODI DI ACCESSO CUSTOM

	Con questa feature si da la possiblità di definire dei metodi di accesso, alle variabili di istanza, custom.
	Ciò vuol dire che non sarà più necessario rispettare la naming convention.

ANNOTATION

	L'annotation che permette la definizione di metodi di accesso custom è: JMapAccessor.

	@JMapAccessor ha tre campi: name, get e set tutti di campo stringa.
	get e set indicano il nome dei rispettivi metodi, name il nome del campo.

	JMapAccessor ha quindi: 
      name (di default prende il nome del campo sul quale è dichiarata l'annotation)
      get: nome del metodo di get
      set: nome del metodo di set
	
	@JMapAccessor può essere utilizzata sia sui campi che sulla classe (il significato che assume è diverso).

@JMapAccessor sul campo
   
	Nel caso in cui name è omesso si dichiara che i get e set custom sono relativi al campo stesso:
	
	@JMapAccessor(get="customGetField", set="customSetField")
	@JMap
	Object field;
	
	Se il nome definito è diverso dal campo corrente, allora si sta dichiarando che i metodi custom 
	sono relativi al campo target:
	
	@JMapAccessor(name="targetField", get="customGetField", set="customSetField")
	@JMap
	Object field;
	
	Devo poter fare entrambe le cose insieme, tramite l'uso dell'annotation JMapAccessors:
	
	@JMapAccessors({
		@JMapAccessor(name="targetField", get="customGetField", set="customSetField"),
		@JMapAccessor(get="customGetField", set="customSetField")
	})
	@JMap
	Object field;
	
	La definizione dei metodi custom di un campo target dal campo mappato hanno maggiore visibilità
	della stessa definizione del campo target, ad esempio:
	
	@JMapAccessor(name="targetField", get="customGetField", set="customSetField")
	@JMap
	Object field;
	
	campo target:
	
	@JMapAccessor(get="myGetField", set="mySetField")
	Object targetField;
	
	in questo caso, a commandare saranno customGetField e customSetField.
	
	Anche se non ci sono metodi custom definiti sul mapped field, bisogna sempre controllare
	il campo target nella sua classe.
	
TEST DA FARE SU QUESTA PARTE

	V @JMapAccessor del campo corrente
	V @JMapAccessor del campo target dal campo corrente
	V Più definizioni di @JMapAccessor, devo poter definire metodi custom per campo corrente e campi target
	V i metodi custom di un target field definiti dal mapped field hanno minore visibilità degli stessi definiti
	  nel target field.
	   
@JMapAccessor sulla classe

	Usato sulla classe indica i metodi custom del campo target, quindi il name non serve specificarlo e se specificato
	renderà inutile la configurazione.
	Per la definizione dei metodi custom dei campi della classe mappata bisogna definirli su loro stessi.
	Esempio:
	
	@JMapAccessor(get="targetGet",set="targetSet")
	@JGlobalMap("targetField")
	public class Source {
   
        @JMapAccessor(get = "asd", set = "qwe")
        private int sourceField;
		
   		int asd()
   		
   		void qwe(int)
   }
   
TEST DA FARE SU QUESTA PARTE

	V @JMapAccessor su classe
	V verificare che in caso di name diverso dal campo target venga ignorata
	

XML
	
	In Xml la definizione di metodi custom avviene tramite l'aggiunta di due nuovi attributi: get e set.
	
	Nel nodo attribute:
	<attribute get= "" set= "">
	</attribute>
	
	Nel nodo global:
	<global name ="" get="" set="">
	</global>
	
	Nei targetAttribute:
	<attribute>
		<attributes>
			<attribute name="" get="" set=""/>
		</attributes>
	</attribute>
	
	<global>
		<attributes>
			<attribute name="" get="" set=""/>
		</attributes>
	</global>
	
	al tag attribute aggiungo attributi get e set, sia agli attributi della classe mappata che a quelli target.
	
     
     se la configurazione del get e set rappresenta un attributo presente in una classe esterna
     e quella corrente è quella che dirige il mapping, allora questa configurazione ha la precedenza della stessa
     configurazione presente sulla classe esterna.
     
     Possibli configurazioni:
     
      - La configurazione xml ha visibilità maggiore
      - la definizione di get e set di un campo target definita dal campo mappato ha maggiore visibilità del get e set di quel
         campo target definiti nella classe target, stesso ragionamento per XML
      - in caso in cui non trovo, per i campi target, definiti get e set allora vado a cercarli nelle loro classi.

    
La configurazione xml deve avere la precedenza su quella annotata.