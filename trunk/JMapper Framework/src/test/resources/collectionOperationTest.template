package it.avutils.jmapper.operations.${folder};

import static it.avutils.jmapper.utils.ClassesManager.getFieldValue;
import static it.avutils.jmapper.utils.GeneralUtility.newLine;
import java.lang.reflect.Field;
import it.avutils.jmapper.bean.${fromClass};
import it.avutils.jmapper.operations.info.InfoOperation;
import it.avutils.jmapper.operations.AOperation;
import java.util.ArrayList;

public class ${testName}Test extends AOperation<${operationType}>{

	@Override
	protected Field getDField() throws NoSuchFieldException {
		return ${fromClass}.class.getDeclaredField("${dFieldName}");
	}

	@Override
	protected Field getSField() throws NoSuchFieldException {
		return ${fromClass}.class.getDeclaredField("${sFieldName}");
	}

	@Override
	protected ${operationType} getOperationIstance() {
		return new ${operationType}();
	}
	
	@Override
	protected InfoOperation getInfoOperation() {
		return new InfoOperation();
	}

	
	@Override
	protected void setUp() {
		super.setUp();
		operation.setDestinationClass(ArrayList.class);
	}
	
	@Override
	protected void AllAll() {
		
		Integer i =  (Integer) getFieldValue(operation,"count");
		
		expected = "   if(source.get${sFieldNameUp}()!=null){"+
		 newLine + "   java.util.ArrayList complexCollection"+i+" = new java.util.ArrayList(source.get${sFieldNameUp}());"+
		 newLine + "   destination.set${dFieldNameUp}(complexCollection"+i+");"+
		 newLine + "   }else{"+
		 newLine + "   destination.set${dFieldNameUp}(null);"+
		 newLine + "   }"+newLine;
		
		actual   = operation.write(newInstance).toString();
		verify();
		
		i =  (Integer) getFieldValue(operation,"count");
		
		expected = "   if(destination.get${dFieldNameUp}()!=null){"+
		 newLine + "   if(source.get${sFieldNameUp}()!=null){"+
		 newLine + "   destination.get${dFieldNameUp}().addAll(source.get${sFieldNameUp}());"+
		 newLine + "   }else{"+
		 newLine + "   destination.set${dFieldNameUp}(null);"+
		 newLine + "   }"+
		 newLine + "   }else{"+
		 newLine + "   if(source.get${sFieldNameUp}()!=null){"+
		 newLine + "   java.util.ArrayList complexCollection"+i+" = new java.util.ArrayList(source.get${sFieldNameUp}());"+
		 newLine + "   destination.set${dFieldNameUp}(complexCollection"+i+");"+
		 newLine + "   }else{"+
		 newLine + "   destination.set${dFieldNameUp}(null);"+
		 newLine + "   }"+
		 newLine + "   }"+newLine;
		
		actual   = operation.write(enrichment).toString();
		verify();
	}

	@Override
	protected void AllValued() {
		
		Integer i =  (Integer) getFieldValue(operation,"count");
		
		expected = "   if(source.get${sFieldNameUp}()!=null){"+
		 newLine + "   java.util.ArrayList complexCollection"+i+" = new java.util.ArrayList(source.get${sFieldNameUp}());"+
		 newLine + "   destination.set${dFieldNameUp}(complexCollection"+i+");"+
		 newLine + "   }"+newLine;
		
		actual	 = operation.write(newInstance).toString();
		verify();
		
		i =  (Integer) getFieldValue(operation,"count");
		
		expected = "   if(source.get${sFieldNameUp}()!=null){"+
		 newLine + "   if(destination.get${dFieldNameUp}()!=null){"+
		 newLine + "   destination.get${dFieldNameUp}().addAll(source.get${sFieldNameUp}());"+
		 newLine + "   }else{"+
		 newLine + "   java.util.ArrayList complexCollection"+i+" = new java.util.ArrayList(source.get${sFieldNameUp}());"+
		 newLine + "   destination.set${dFieldNameUp}(complexCollection"+i+");"+
		 newLine + "   }"+
		 newLine + "   }"+newLine;
		
		actual	 = operation.write(enrichment).toString();
		verify();
	}

	@Override
	protected void ValuedAll() {
		
		expected = "   if(destination.get${dFieldNameUp}()!=null){"+
		 newLine + "   if(source.get${sFieldNameUp}()!=null){"+
		 newLine + "   destination.get${dFieldNameUp}().addAll(source.get${sFieldNameUp}());"+
		 newLine + "   }else{"+
		 newLine + "   destination.set${dFieldNameUp}(null);"+
		 newLine + "   }"+
		 newLine + "   }"+newLine;
		
		actual	 = operation.write(enrichment).toString();
		verify();	
	}

	@Override
	protected void ValuedValued() {

		expected = "   if(destination.get${dFieldNameUp}()!=null){"+
		 newLine + "   if(source.get${sFieldNameUp}()!=null){"+
		 newLine + "   destination.get${dFieldNameUp}().addAll(source.get${sFieldNameUp}());"+
		 newLine + "   }"+
		 newLine + "   }"+newLine;
		
		actual	 = operation.write(enrichment).toString();
		verify();	
	}

	@Override
	protected void ValuedNull() {
		
		expected = "   if(destination.get${dFieldNameUp}()!=null){"+
	     newLine + "   if(source.get${sFieldNameUp}()==null){"+
	     newLine + "   destination.set${dFieldNameUp}(null);"+
	     newLine + "   }"+
	     newLine + "   }"+newLine;
		
		actual	 = operation.write(enrichment).toString();
		verify();		
	}

	@Override
	protected void NullValued() {

		Integer i =  (Integer) getFieldValue(operation,"count");
		
		expected = "   if(destination.get${dFieldNameUp}()==null){"+
		 newLine + "   if(source.get${sFieldNameUp}()!=null){"+
		 newLine + "   java.util.ArrayList complexCollection"+i+" = new java.util.ArrayList(source.get${sFieldNameUp}());"+
		 newLine + "   destination.set${dFieldNameUp}(complexCollection"+i+");"+
		 newLine + "   }"+
		 newLine + "   }"+newLine;
		
		actual	 = operation.write(enrichment).toString();
		verify();		
	}	
}